#
# 23 Apr 22


wikipedia
general-purpose

weight

keyword
and
and_eq
asm
auto
bitand
bitor
bool
break
case
catch
char
class
compl
const
const_cast
continue
default
delete
do
double
dynamic_cast
else
enum
explicit
export
extern
false
float
for
friend
goto
if
inline
int
long
mutable
namespace
new
not
not_eq
operator
or
or_eq
private
protected
public
register
reinterpret_cast
return
short
signed
sizeof
static
static_cast
struct
switch
template
this
throw
true
try
typedef
typeid
typename
union
unsigned
using
virtual
void
volatile
wchar_t
while
xor
xor_eq 

comment
to-end-of-line
start
end

white-space
significant
free-form
line-continuation
backslash

identifier
case-significant
characters-significant

literal
integer-decimal
integer-hexadecimal
integer-octal
integer-character
floating-point
string

control-flow
{ }
switch
goto
break
continue
if
else
for
while
do

expression
infix
left-associative

ternary-operator
?: 	2	# Ternary conditional (see ?:) 	Right-to-left

binary-operator

# () 	16	# Function call
[] 	16	# Array subscripting
. 	16	# Element selection by reference
-> 	16	# Element selection through pointer
typeid 	16	# Run-time type information (C++ only) (see typeid)
const_cast 	16	# Type cast (C++ only) (see const_cast)
dynamic_cast 	16	# Type cast (C++ only) (see dynamic cast)
reinterpret_cast 	16	# Type cast (C++ only) (see reinterpret_cast)
static_cast 	16	# Type cast (C++ only) (see static_cast)

.* 	14	# Pointer to member (C++ only) 	Left-to-right
->* 	14	# Pointer to member (C++ only)

* 	13	# Multiplication 	Left-to-right
/ 	13	# Division
% 	13	# Modulo (remainder)

+ 	12	# Addition 	Left-to-right
- 	12	# Subtraction

<< 	11	# Bitwise left shift 	Left-to-right
>> 	11	# Bitwise right shift

<=> 	10	# Three-way comparison (Introduced in C++20 - C++ only) 	Left-to-right

< 	9	# Less than 	Left-to-right
<= 	9	# Less than or equal to
> 	9	# Greater than
>= 	9	# Greater than or equal to

== 	8	# Equal to 	Left-to-right
!= 	8	# Not equal to

& 	7	# Bitwise AND 	Left-to-right

^ 	6	# Bitwise XOR (exclusive or) 	Left-to-right

| 	5	# Bitwise OR (inclusive or) 	Left-to-right

&& 	4	# Logical AND 	Left-to-right

|| 	3	# Logical OR 	Left-to-right

= 	2	# Direct assignment
+= 	2	# Assignment by sum
-= 	2	# Assignment by difference
*= 	2	# Assignment by product
/= 	2	# Assignment by quotient
%= 	2	# Assignment by remainder
<<= 	2	# Assignment by bitwise left shift
>>= 	2	# Assignment by bitwise right shift
&= 	2	# Assignment by bitwise AND
^= 	2	# Assignment by bitwise XOR
|= 	2	# Assignment by bitwise OR
throw 	2	# Throw operator (exceptions throwing, C++ only)

","       1	# comma operator

unary-operator
++ 	15	# Prefix increment 	Right-to-left
-- 	15	# Prefix decrement
+ 	15	# Unary plus
- 	15	# Unary minus
! 	15	# Logical NOT
~ 	15	# Bitwise NOT (One's Complement)
	  	# (type)	15	# Type cast
* 	15	# Indirection (dereference)
& 	15	# Address-of
sizeof 	15	# Sizeof
_Alignof 	15	# Alignment requirement (since C11)
new 	15	# Dynamic memory allocation (C++ only)
delete 	15	# Dynamic memory deallocation (C++ only)

declaration
struct
union
int
float
enum
*
statement
semicolon
file-import
#include

function-definition

overloaded
arguments-type-checked
variadic-arguments
pass-by-value
pass-by-reference


