#
# 23 Apr 22


wikipedia
high-level
class-based
object-oriented

keyword
abstract 
assert 
boolean 
break 
byte 
case 
catch 
char 
class 
const 
continue 
default 
do 
double 
else 
enum 
extends 
final 
finally 
float 
for 
goto 
if 
implements 
import 
instanceof 
int 
interface 
long 
native 
new 
package 
private 
protected 
public 
return 
short 
static 
strictfp 
super 
switch
synchronized
this
throw
throws
transient
try
var
void
volatile
while 

ternary-operator

?: 	2	# Ternary conditional (see ?:) 	Right-to-left

binary-operator

() 	15	# Method invocation 	Left-to-right
[] 	15	# Array access
. 	15	# Class member selection

* 	12	# Multiplication, division, and modulus (remainder) 	Left-to-right
/ 	12	# Multiplication, division, and modulus (remainder) 	Left-to-right
% 	12	# Multiplication, division, and modulus (remainder) 	Left-to-right

+ 	11	# Addition and subtraction, String concatenation
- 	11	# Addition and subtraction, String concatenation

<< 	10	# Bitwise left shift, signed right shift and unsigned right shift
>> 	10	# Bitwise left shift, signed right shift and unsigned right shift
>>> 	10	# Bitwise left shift, signed right shift and unsigned right shift

< 	9	# Relational “less than” and “less than or equal to”
<= 	9	# Relational “less than” and “less than or equal to”
> 	9	# Relational “greater than” and “greater than or equal to”
>= 	9	# Relational “greater than” and “greater than or equal to”
instanceof 	9	# Type comparison

== 	8	# Relational “equal to” and “not equal to”
!= 	8	# Relational “equal to” and “not equal to”

& 	7	# Bitwise and logical AND

^ 	6	# Bitwise and logical XOR (exclusive or)

| 	5	# Bitwise and logical OR (inclusive or)

&& 	4	# Logical conditional-AND

|| 	3	# Logical conditional-OR

= 	1	# Simple assignment
+= 	1	# Assignment by sum and difference
-= 	1	# Assignment by sum and difference
*= 	1	# Assignment by product, quotient, and remainder
/= 	1	# Assignment by product, quotient, and remainder
%= 	1	# Assignment by product, quotient, and remainder
<<= 	1	# Assignment by bitwise left shift, signed right shift and unsigned right shift
>>= 	1	# Assignment by bitwise left shift, signed right shift and unsigned right shift
>>>= 	1	# Assignment by bitwise left shift, signed right shift and unsigned right shift
&= 	1	# Assignment by bitwise AND, XOR, and OR 
^= 	1	# Assignment by bitwise AND, XOR, and OR 
|= 	1	# Assignment by bitwise AND, XOR, and OR 

unary-operator
++ 	14	# Postfix increment and decrement[1]
-- 	14	# Postfix increment and decrement[1]

+ 	13	# Unary plus and minus
- 	13	# Unary plus and minus
! 	13	# Logical NOT and bitwise NOT
~ 	13	# Logical NOT and bitwise NOT
	 	# (type) val 	13 # Type cast
new 	13	# Class instance or array creation

function-definition

overloaded
arguments-type-checked
variadic-arguments
scalar-by-value
object-by-reference


